# -*- coding: utf-8 -*-
"""codigo proyecto

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h7nTX61nWiFmVz-Qb7dYTl0flaIC8b8i
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px


st.set_page_config(page_title="An치lisis de Secuencias", layout="wide")
st.title("游댧 An치lisis de Secuencias")
st.markdown("""Este dashboard permite analizar y visualizar datos relacionados con secuencias biol칩gicas.
Utiliza los controles para interactuar con los datos.""")

st.sidebar.title("游늭 Carga de Datos y Configuraci칩n")
uploaded_file = st.sidebar.file_uploader("Sube tu archivo FASTA o CSV", type=["fasta", "csv"])

if uploaded_file:
    progress_bar = st.progress(0)
    status_text = st.empty()

    if uploaded_file.name.endswith(".fasta"):
        status_text.text("Cargando archivo FASTA...")
        progress_bar.progress(25)

        sequences = uploaded_file.getvalue().decode("utf-8").splitlines()
        sequences = [line.strip() for line in sequences if not line.startswith(">")]
        progress_bar.progress(75)

        st.sidebar.success("Archivo FASTA subido correctamente!")
        st.write(f"### N칰mero de secuencias cargadas: {len(sequences)}")
        progress_bar.progress(100)
        status_text.text("Archivo FASTA procesado con 칠xito.")

    else:
        status_text.text("Cargando archivo CSV...")
        progress_bar.progress(25)

        data = pd.read_csv(uploaded_file)
        progress_bar.progress(50)

        st.sidebar.success("Archivo CSV subido correctamente!")
        st.write("### Vista Previa de los Datos")
        st.dataframe(data)
        progress_bar.progress(75)

        st.write("### Estad칤sticas Descriptivas")
        st.dataframe(data.describe())
        progress_bar.progress(100)
        status_text.text("Archivo CSV procesado con 칠xito.")

st.header("Indicadores Clave de Desempe침o")
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(label="游댕 Precisi칩n de alineaci칩n", value="95.3%")
with col2:
    st.metric(label="游늵 Estructuras predecidas", value="128")
with col3:
    st.metric(label="游댌 Motivos encontrados", value="78")
with col4:
    st.metric(label="游늳 Correlaci칩n estad칤stica", value="0.87", delta="0.02")

# Herramientas interactivas
st.header("Herramientas Interactivas")

if uploaded_file:
    # Determinamos el tipo de archivo cargado
    if uploaded_file.name.endswith(".fasta"):
        # Procesar archivo FASTA
        fasta_content = uploaded_file.getvalue().decode("utf-8").splitlines()
        sequences = {}
        current_header = None

        for line in fasta_content:
            line = line.strip()
            if line.startswith(">"):  # Encabezado de secuencia
                current_header = line[1:]  # Removemos ">"
                sequences[current_header] = ""
            elif current_header:
                sequences[current_header] += line  # A침adimos secuencia al encabezado actual
        
        st.sidebar.success("Archivo FASTA procesado correctamente")
        st.write(f"### Total de secuencias cargadas: {len(sequences)}")
        st.write("**Vista previa de secuencias:**")
        st.json(sequences)

    elif uploaded_file.name.endswith(".csv"):
        # Procesar archivo CSV
        try:
            data = pd.read_csv(uploaded_file)
            st.sidebar.success("Archivo CSV procesado correctamente")
            st.write("### Vista previa del archivo CSV:")
            st.dataframe(data)
        except Exception as e:
            st.error(f"Error al procesar el archivo CSV: {str(e)}")
            data = None
    else:
        st.error("Formato de archivo no soportado.")
        sequences = None
        data = None

    # Herramientas interactivas basadas en el contenido del archivo
    selected_tool = st.radio(
        "Elige una herramienta para analizar tus secuencias:",
        options=["Alineaci칩n", "Predicci칩n de estructuras", "B칰squeda de motivos", "An치lisis estad칤stico"]
    )

    # Herramienta: Alineaci칩n
    if selected_tool == "Alineaci칩n":
        st.subheader("Alineaci칩n de Secuencia")
        if sequences:
            st.text("Ejemplo de alineaci칩n basada en las primeras dos secuencias cargadas:")
            seq_headers = list(sequences.keys())
            if len(seq_headers) >= 2:
                seq1, seq2 = sequences[seq_headers[0]], sequences[seq_headers[1]]
                st.code(f"""
                Secuencia 1: {seq1}
                Secuencia 2: {seq2}
                Puntuaci칩n de alineaci칩n: Ejemplo: 92
                """)
            else:
                st.warning("No hay suficientes secuencias para realizar una alineaci칩n.")
        else:
            st.warning("La alineaci칩n solo est치 disponible para archivos FASTA.")

    elif selected_tool == "Predicci칩n de estructuras":
        st.subheader("Predicci칩n de Estructuras Proteicas")
        if sequences:
            st.text("Ejemplo de predicci칩n basado en la primera secuencia:")
            first_sequence = next(iter(sequences.values()))
            st.write(f"**Secuencia seleccionada:** {first_sequence[:50]}... (longitud: {len(first_sequence)})")
            st.image("https://via.placeholder.com/300", caption="Estructura 3D (Placeholder)")
        else:
            st.warning("La predicci칩n de estructuras solo est치 disponible para archivos FASTA.")

    # Herramienta: B칰squeda de motivos
    elif selected_tool == "B칰squeda de motivos":
        st.subheader("B칰squeda de Motivos")
        if sequences:
            st.text("Buscando motivos comunes en las secuencias cargadas...")
            motivos = ["ATG", "TATA", "CCGG"]  # Ejemplo de motivos
            resultados = {motivo: 0 for motivo in motivos}
            for seq in sequences.values():
                for motivo in motivos:
                    if motivo in seq:
                        resultados[motivo] += 1
            st.write("**Motivos encontrados:**")
            st.table(pd.DataFrame({"Motivo": resultados.keys(), "Frecuencia": resultados.values()}))
        else:
            st.warning("La b칰squeda de motivos solo est치 disponible para archivos FASTA.")

    elif selected_tool == "An치lisis estad칤stico":
        st.subheader("An치lisis de Correlaci칩n Estad칤stica")
        if data is not None:
            st.text("Calculando estad칤sticas descriptivas...")
            st.write("### Estad칤sticas:")
            st.dataframe(data.describe())
            st.write("### Ejemplo de an치lisis de correlaci칩n:")
            correlation = data.corr()
            st.write("**Matriz de correlaci칩n:**")
            st.dataframe(correlation)
        else:
            st.warning("El an치lisis estad칤stico solo est치 disponible para archivos CSV.")
else:
    st.warning("Primero sube un archivo para habilitar las herramientas interactivas.")

st.header("Visualizaciones")
tab1, tab2 = st.tabs(["Frecuencia del Motivo", "Distribuci칩n de Contenido GC"])

with tab1:
    motifs = ["ATG", "TATA", "CCGG"]
    frequencies = [25, 15, 10]
    fig = px.bar(x=motifs, y=frequencies, labels={'x': "Motivos", 'y': "Frecuencia"},
                 title="Frecuencia de Motivos", color_discrete_sequence=['violet'])
    st.plotly_chart(fig)

with tab2:
    lengths = np.random.normal(loc=1500, scale=300, size=100)
    fig = px.histogram(x=lengths, nbins=20, labels={'x': "Contenido GC (%)", 'y': "Frecuencia"},
                       title="Distribuci칩n de Contenido GC", color_discrete_sequence=['lightgreen'])
    st.plotly_chart(fig)

if uploaded_file and not uploaded_file.name.endswith(".fasta"):
    st.sidebar.markdown("---")
    st.sidebar.write("游닌 Descarga de Resultados")
    csv = data.to_csv(index=False)
    st.sidebar.download_button(label="Descargar resultados", data=csv, file_name="resultados.csv", mime="text/csv")

st.sidebar.markdown("---")
st.sidebar.write("游눹 Desarrollado por [Yoleth Barrios y Lucero Ramos]")
