# -*- coding: utf-8 -*-
"""codigo proyecto

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h7nTX61nWiFmVz-Qb7dYTl0flaIC8b8i
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px


st.set_page_config(page_title="Análisis de Secuencias", layout="wide")
st.title("🔬 Análisis de Secuencias")
st.markdown("""Este dashboard permite analizar y visualizar datos relacionados con secuencias biológicas.
Utiliza los controles para interactuar con los datos.""")

st.sidebar.title("📂 Carga de Datos y Configuración")
uploaded_file = st.sidebar.file_uploader("Sube tu archivo FASTA o CSV", type=["fasta", "csv"])

if uploaded_file:
    progress_bar = st.progress(0)
    status_text = st.empty()

    if uploaded_file.name.endswith(".fasta"):
        status_text.text("Cargando archivo FASTA...")
        progress_bar.progress(25)

        sequences = uploaded_file.getvalue().decode("utf-8").splitlines()
        sequences = [line.strip() for line in sequences if not line.startswith(">")]
        progress_bar.progress(75)

        st.sidebar.success("Archivo FASTA subido correctamente!")
        st.write(f"### Número de secuencias cargadas: {len(sequences)}")
        progress_bar.progress(100)
        status_text.text("Archivo FASTA procesado con éxito.")

    else:
        status_text.text("Cargando archivo CSV...")
        progress_bar.progress(25)

        data = pd.read_csv(uploaded_file)
        progress_bar.progress(50)

        st.sidebar.success("Archivo CSV subido correctamente!")
        st.write("### Vista Previa de los Datos")
        st.dataframe(data)
        progress_bar.progress(75)

        st.write("### Estadísticas Descriptivas")
        st.dataframe(data.describe())
        progress_bar.progress(100)
        status_text.text("Archivo CSV procesado con éxito.")

st.header("Indicadores Clave de Desempeño")
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(label="🔗 Precisión de alineación", value="95.3%")
with col2:
    st.metric(label="📊 Estructuras predecidas", value="128")
with col3:
    st.metric(label="🔍 Motivos encontrados", value="78")
with col4:
    st.metric(label="📈 Correlación estadística", value="0.87", delta="0.02")

# Herramientas interactivas
st.header("Herramientas Interactivas")

if uploaded_file:
    # Determinamos el tipo de archivo cargado
    if uploaded_file.name.endswith(".fasta"):
        # Procesar archivo FASTA
        fasta_content = uploaded_file.getvalue().decode("utf-8").splitlines()
        sequences = {}
        current_header = None

        for line in fasta_content:
            line = line.strip()
            if line.startswith(">"):  # Encabezado de secuencia
                current_header = line[1:]  # Removemos ">"
                sequences[current_header] = ""
            elif current_header:
                sequences[current_header] += line  # Añadimos secuencia al encabezado actual
        
        st.sidebar.success("Archivo FASTA procesado correctamente")
        st.write(f"### Total de secuencias cargadas: {len(sequences)}")
        st.write("**Vista previa de secuencias:**")
        st.json(sequences)

    elif uploaded_file.name.endswith(".csv"):
        # Procesar archivo CSV
        try:
            data = pd.read_csv(uploaded_file)
            st.sidebar.success("Archivo CSV procesado correctamente")
            st.write("### Vista previa del archivo CSV:")
            st.dataframe(data)
        except Exception as e:
            st.error(f"Error al procesar el archivo CSV: {str(e)}")
            data = None
    else:
        st.error("Formato de archivo no soportado.")
        sequences = None
        data = None

    # Herramientas interactivas basadas en el contenido del archivo
    selected_tool = st.radio(
        "Elige una herramienta para analizar tus secuencias:",
        options=["Alineación", "Predicción de estructuras", "Búsqueda de motivos", "Análisis estadístico"]
    )

    # Herramienta: Alineación
    if selected_tool == "Alineación":
        st.subheader("Alineación de Secuencia")
        if sequences:
            st.text("Ejemplo de alineación basada en las primeras dos secuencias cargadas:")
            seq_headers = list(sequences.keys())
            if len(seq_headers) >= 2:
                seq1, seq2 = sequences[seq_headers[0]], sequences[seq_headers[1]]
                st.code(f"""
                Secuencia 1: {seq1}
                Secuencia 2: {seq2}
                Puntuación de alineación: Ejemplo: 92
                """)
            else:
                st.warning("No hay suficientes secuencias para realizar una alineación.")
        else:
            st.warning("La alineación solo está disponible para archivos FASTA.")

    elif selected_tool == "Predicción de estructuras":
        st.subheader("Predicción de Estructuras Proteicas")
        if sequences:
            st.text("Ejemplo de predicción basado en la primera secuencia:")
            first_sequence = next(iter(sequences.values()))
            st.write(f"**Secuencia seleccionada:** {first_sequence[:50]}... (longitud: {len(first_sequence)})")
            st.image("https://via.placeholder.com/300", caption="Estructura 3D (Placeholder)")
        else:
            st.warning("La predicción de estructuras solo está disponible para archivos FASTA.")

    # Herramienta: Búsqueda de motivos
    elif selected_tool == "Búsqueda de motivos":
        st.subheader("Búsqueda de Motivos")
        if sequences:
            st.text("Buscando motivos comunes en las secuencias cargadas...")
            motivos = ["ATG", "TATA", "CCGG"]  # Ejemplo de motivos
            resultados = {motivo: 0 for motivo in motivos}
            for seq in sequences.values():
                for motivo in motivos:
                    if motivo in seq:
                        resultados[motivo] += 1
            st.write("**Motivos encontrados:**")
            st.table(pd.DataFrame({"Motivo": resultados.keys(), "Frecuencia": resultados.values()}))
        else:
            st.warning("La búsqueda de motivos solo está disponible para archivos FASTA.")

elif selected_tool == "Análisis estadístico":
    st.subheader("Análisis Estadístico de Secuencias (FASTA)")

    # Asegurarnos de que el archivo sea FASTA
    if uploaded_file and uploaded_file.name.endswith(".fasta"):
        try:
            # Leer y procesar el archivo FASTA
            fasta_content = uploaded_file.getvalue().decode("utf-8").splitlines()
            sequences = {}
            current_header = None

            for line in fasta_content:
                line = line.strip()
                if line.startswith(">"):  # Línea de encabezado
                    current_header = line[1:]  # Removemos ">"
                    sequences[current_header] = ""
                elif current_header:
                    sequences[current_header] += line  # Concatenar la secuencia al encabezado actual

            st.sidebar.success("Archivo FASTA cargado correctamente.")

            # Mostrar el número de secuencias y vista previa
            st.write(f"### Número de secuencias cargadas: {len(sequences)}")
            st.write("### Vista previa de las secuencias (primeros 5):")
            st.json({header: seq[:50] + "..." for header, seq in list(sequences.items())[:5]})

            # Estadísticas descriptivas
            st.write("### Estadísticas de Longitudes de Secuencia:")
            sequence_lengths = [len(seq) for seq in sequences.values()]
            st.write(f"- Longitud mínima: {min(sequence_lengths)}")
            st.write(f"- Longitud máxima: {max(sequence_lengths)}")
            st.write(f"- Longitud promedio: {np.mean(sequence_lengths):.2f}")

            # Visualización: distribución de longitudes de secuencia
            st.write("### Visualización: Distribución de Longitudes de Secuencia")
            fig = px.histogram(
                x=sequence_lengths,
                nbins=20,
                labels={'x': "Longitud de Secuencia", 'y': "Frecuencia"},
                title="Distribución de Longitudes de Secuencia",
                color_discrete_sequence=['lightblue']
            )
            st.plotly_chart(fig)
        except Exception as e:
            st.error(f"Error al procesar el archivo FASTA: {str(e)}")
    else:
        st.warning("Por favor, sube un archivo en formato FASTA para usar esta herramienta.")


# Visualizaciones
st.header("Visualizaciones")

if uploaded_file:
    if uploaded_file.name.endswith(".fasta"):
        # Visualización para archivos FASTA
        st.write("**Visualizaciones basadas en secuencias cargadas (FASTA):**")
        tab1, tab2 = st.tabs(["Frecuencia del Motivo", "Distribución de Longitudes de Secuencia"])

        # Tab 1: Frecuencia de motivos
        with tab1:
            st.subheader("Frecuencia de Motivos")
            motivos = ["ATG", "TATA", "CCGG"]  # Motivos a buscar
            frecuencias = {motivo: 0 for motivo in motivos}

            for seq in sequences.values():
                for motivo in motivos:
                    frecuencias[motivo] += seq.count(motivo)

            # Crear gráfico de barras
            fig = px.bar(
                x=list(frecuencias.keys()),
                y=list(frecuencias.values()),
                labels={'x': "Motivos", 'y': "Frecuencia"},
                title="Frecuencia de Motivos en las Secuencias",
                color_discrete_sequence=['violet']
            )
            st.plotly_chart(fig)

        # Tab 2: Distribución de longitudes
        with tab2:
            st.subheader("Distribución de Longitudes de Secuencia")
            longitudes = [len(seq) for seq in sequences.values()]

            # Crear histograma
            fig = px.histogram(
                x=longitudes,
                nbins=20,
                labels={'x': "Longitud de Secuencia", 'y': "Frecuencia"},
                title="Distribución de Longitudes de Secuencia",
                color_discrete_sequence=['lightgreen']
            )
            st.plotly_chart(fig)

    elif uploaded_file.name.endswith(".csv"):
        # Visualización para archivos CSV
        st.write("**Visualizaciones basadas en datos cargados (CSV):**")
        tab1, tab2 = st.tabs(["Distribución de Columnas", "Correlaciones entre Variables"])

        # Tab 1: Distribución de columnas
        with tab1:
            st.subheader("Distribución de Columnas Numéricas")
            numeric_columns = data.select_dtypes(include=['float64', 'int64']).columns
            if len(numeric_columns) > 0:
                selected_column = st.selectbox("Selecciona una columna para visualizar:", numeric_columns)
                fig = px.histogram(
                    data, 
                    x=selected_column, 
                    nbins=20, 
                    labels={'x': selected_column, 'y': "Frecuencia"},
                    title=f"Distribución de {selected_column}",
                    color_discrete_sequence=['blue']
                )
                st.plotly_chart(fig)
            else:
                st.warning("El archivo no contiene columnas numéricas.")

        # Tab 2: Correlaciones entre variables
        with tab2:
            st.subheader("Correlación entre Variables Numéricas")
            if len(numeric_columns) > 1:
                fig = px.imshow(
                    data[numeric_columns].corr(),
                    text_auto=True,
                    labels={'color': "Correlación"},
                    title="Matriz de Correlación"
                )
                st.plotly_chart(fig)
            else:
                st.warning("El archivo no tiene suficientes columnas numéricas para calcular correlaciones.")
else:
    st.warning("Primero sube un archivo para generar visualizaciones.")

if uploaded_file and not uploaded_file.name.endswith(".fasta"):
    st.sidebar.markdown("---")
    st.sidebar.write("📥 Descarga de Resultados")
    csv = data.to_csv(index=False)
    st.sidebar.download_button(label="Descargar resultados", data=csv, file_name="resultados.csv", mime="text/csv")

st.sidebar.markdown("---")
st.sidebar.write("💻 Desarrollado por [Yoleth Barrios y Lucero Ramos]")
